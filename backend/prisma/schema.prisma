generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String?
  passwordHash String?
  isAdmin      Boolean  @default(false)
  blocked      Boolean  @default(false)
  inventories  Inventory[] @relation("OwnerInventories")
  items        Item[]      @relation("UserItems")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Inventory {
  id          String    @id @default(uuid())
  title       String
  description String?
  category    String?
  imageUrl    String?
  tags        String[]
  ownerId     String
  owner       User      @relation("OwnerInventories", fields: [ownerId], references: [id])
  fields      Field[]
  items       Item[]
  accessList  Access[]
  isPublic    Boolean   @default(false)
  customIdFormat String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Field {
  id          String    @id @default(uuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  name        String
  type        FieldType
  title       String
  visible     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum FieldType {
  STRING
  NUMBER
  DATE
  BOOLEAN
  SELECT
}

model Item {
  id          String    @id @default(uuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  userId      String
  user        User      @relation("UserItems", fields: [userId], references: [id])
  customId    String
  values      Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([inventoryId, customId])
}

model Access {
  id          String    @id @default(uuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  canWrite    Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Comment {
  id          String    @id @default(uuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  content     String
  createdAt   DateTime  @default(now())
}

model Like {
  id          String    @id @default(uuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
}